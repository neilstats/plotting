[
  {
    "objectID": "posts/ckbplotr/shape-plot-ci-arrows.html",
    "href": "posts/ckbplotr/shape-plot-ci-arrows.html",
    "title": "Adding arrows to confidence intervals when using shape_plot()",
    "section": "",
    "text": "Using ckbplotr::shape_plot() you may have confidence interval limits outside your chosen limits for the y axis. The confidence interval lines (and text labels) will extend outside the plotting area and maybe outside the plot entirely:\n\nshape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],\n           col.x        = \"rf\",\n           col.estimate = \"est\",\n           col.stderr   = \"se\",\n           col.n        = \"n\",\n           xlims        = c(15, 50),\n           ylims        = c(0.9, 1.8),\n           scalepoints  = TRUE)\n\n\n\n\nIf you definitely want to keep those axis limits, you may want to add arrows to the confidence interval lines. First use addaes in ckbplotr::shape_plot() to truncate the confidence interval lines (and change the position of the text):\n\np <- shape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],\n                col.x        = \"rf\",\n                col.estimate = \"est\",\n                col.stderr   = \"se\",\n                col.n        = \"n\",\n                xlims        = c(15, 50),\n                ylims        = c(0.9, 1.8),\n                scalepoints  = TRUE,\n                printplot    = FALSE,\n                addaes       = list(ci = c(\"ymin = pmax(0.9, est-1.96*se)\",\n                                           \"ymax = pmin(1.8, est+1.96*se)\"),\n                                    estimates = \"y = pmin(1.8, est+1.96*se)\",\n                                    n         = \"y = pmax(0.9, est-1.96*se)\"),\n                \n                ## increase the gap between the x-axis and plotting area\n                gap = c(0.025, 0.1))\n\nThen add geom_segment() layers to the plot to add small segments with arrows. Use the data argument to filter the data to only include the rows where the confidence limit is outside the axis limit.\n\np$plot +\n  geom_segment(aes(x = rf,\n                   xend = rf,\n                   y = 1.799,\n                   yend = 1.8),\n               arrow = arrow(length = unit(2, \"mm\"),\n                             type = \"closed\"),\n               data = ~ dplyr::filter(., est + 1.96 * se > 1.8)) +\n  geom_segment(aes(x = rf,\n                   xend = rf,\n                   y = 0.90001,\n                   yend = 0.9),\n               arrow = arrow(length = unit(2, \"mm\"),\n                             type = \"closed\"),\n               data = ~ dplyr::filter(., est - 1.96 * se < 0.9))"
  },
  {
    "objectID": "posts/ckbplotr/removing-parts.html",
    "href": "posts/ckbplotr/removing-parts.html",
    "title": "Removing parts of a plot created with shape_plot() or forest_plot()",
    "section": "",
    "text": "There are various ways to remove parts of plots (or make them not appear) created with shape_plot() and forest_plot(). Which will work best may depend on how you are using the code, some examples are:\n\nRemove text by setting label to NA\n\nshape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],\n           col.x        = \"rf\",\n           col.estimate = \"est\",\n           col.stderr   = \"se\",\n           xlims        = c(15, 50),\n           ylims        = c(0.5, 3),\n           addaes       = list(estimates = \"label = NA\"))\n\n\n\n\nYou could also set x or y to NA_real_.\n\n\nRemove points by setting their colour to NA\n\nforest_plot(panels   = list(resultsA, resultsB),\n            col.key  = \"variable\",\n            colour   = NA,\n            cicolour = \"black\")\n\n\n\n\n\n\nRemove points by setting their size to zero\n\nforest_plot(panels    = list(resultsA, resultsB),\n            col.key   = \"variable\",\n            pointsize = 0)\n\n\n\n\n\n\nRemove confidence interval lines by setting their colour to NA\n\nforest_plot(panels   = list(resultsA, resultsB),\n            col.key  = \"variable\",\n            colour   = \"black\",\n            cicolour = NA)\n\n\n\n\n\n\nRemove points by removing that layer of the ggplot object\n\nforest <- forest_plot(panels    = list(resultsA, resultsB),\n                      col.key   = \"variable\",\n                      printplot = FALSE)\n\n## first check which layer in forest$plot\n## is the geom_point() for points, then remove\nforest$plot$layers[[2]] <- NULL\nforest$plot"
  },
  {
    "objectID": "posts/ckbplotr/forest-plot-column.html",
    "href": "posts/ckbplotr/forest-plot-column.html",
    "title": "Adding columns of text to forest plots (but not every panel)",
    "section": "",
    "text": "In the ckbplotr::forest_plot() function the col.left and col.right arguments can be used to add columns of text to the plot - and they will add these columns for each panel in the plot.\nBut what if we want to add a column to only the left or right of all panels?\nTo do this, set text we do not want plotted as missing and adjust the mid.space argument to remove unwanted extra space. For example…\nFirst create a plot without the additional column:\n\nforest_plot(panels            = list(resultsA, resultsB),\n            col.key           = \"variable\",\n            row.labels        = ckbplotr_row_labels,\n            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),\n            rows              = c(\"Triglycerides concentration\",\n                                  \"Lipoprotein particle concentration\"),\n            exponentiate      = TRUE,\n            panel.headings    = c(\"Analysis A\", \"Analysis B\"),\n            ci.delim          = \" - \",\n            xlim              = c(0.9, 1.1),\n            xticks            = c(0.9, 1, 1.1),\n            blankrows         = c(1, 1, 0, 1),\n            scalepoints       = TRUE,\n            pointsize         = 3,\n            col.heading.space = 1.5)\n\n\n\n\nNote the automatically calculated value for left.space is unit(2.9, \"mm\"), and for right.space is unit(25.5, \"mm\"). (These are shown in the RStudio Viewer pane.)\nNow create the plot with the additional column n using col.left (or col.right as applicable).\n\nforest_plot(panels            = list(resultsA, resultsB),\n            col.key           = \"variable\",\n            row.labels        = ckbplotr_row_labels,\n            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),\n            rows              = c(\"Triglycerides concentration\",\n                                  \"Lipoprotein particle concentration\"),\n            exponentiate      = TRUE,\n            panel.headings    = c(\"Analysis A\", \"Analysis B\"),\n            ci.delim          = \" - \",\n            xlim              = c(0.9, 1.1),\n            xticks            = c(0.9, 1, 1.1),\n            blankrows         = c(1, 1, 0, 1),\n            scalepoints       = TRUE,\n            pointsize         = 3,\n            col.heading.space = 1.5,\n            \n            col.left          = \"n\",\n            col.left.heading  = \"No. of\\nevents\")\n\n\n\n\nNote that the automatically calculated col.left is now unit(12.9, \"mm\"). That is, there is now 10mm more space to the left of each panel for the added column of text.\nTo remove the column for the second panel, set the text to be plotted as missing and use a list for col.left.heading so that the heading is missing for the second panel.\n\nresultsB$n <- NA\n\nforest_plot(panels            = list(resultsA, resultsB),\n            col.key           = \"variable\",\n            row.labels        = ckbplotr_row_labels,\n            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),\n            rows              = c(\"Triglycerides concentration\",\n                                  \"Lipoprotein particle concentration\"),\n            exponentiate      = TRUE,\n            panel.headings    = c(\"Analysis A\", \"Analysis B\"),\n            ci.delim          = \" - \",\n            xlim              = c(0.9, 1.1),\n            xticks            = c(0.9, 1, 1.1),\n            blankrows         = c(1, 1, 0, 1),\n            scalepoints       = TRUE,\n            pointsize         = 3,\n            col.heading.space = 1.5,\n            \n            col.left          = \"n\",\n            col.left.heading  = list(\"No. of\\nevents\", NA))\n\nWarning: Removed 1 rows containing missing values (`geom_text_move()`).\n\n\n\n\n\nTo remove the extra 10mm of space between the panels, we subtract this from mid.space (which by default is 5mm):\n\nforest_plot(panels            = list(resultsA, resultsB),\n            col.key           = \"variable\",\n            row.labels        = ckbplotr_row_labels,\n            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),\n            rows              = c(\"Triglycerides concentration\",\n                                  \"Lipoprotein particle concentration\"),\n            exponentiate      = TRUE,\n            panel.headings    = c(\"Analysis A\", \"Analysis B\"),\n            ci.delim          = \" - \",\n            xlim              = c(0.9, 1.1),\n            xticks            = c(0.9, 1, 1.1),\n            blankrows         = c(1, 1, 0, 1),\n            scalepoints       = TRUE,\n            pointsize         = 3,\n            col.heading.space = 1.5,\n            \n            col.left          = \"n\",\n            col.left.heading  = list(\"No. of\\nevents\", NA),\n            mid.space         = unit(5, \"mm\") - unit(10, \"mm\"))\n\nWarning: Removed 1 rows containing missing values (`geom_text_move()`).\n\n\n\n\n\nTo do something similar for a column (nb) on the right on the plot:\n\nresultsA$nb <- NA\n\nforest_plot(panels            = list(resultsA, resultsB),\n            col.key           = \"variable\",\n            row.labels        = ckbplotr_row_labels,\n            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),\n            rows              = c(\"Triglycerides concentration\",\n                                  \"Lipoprotein particle concentration\"),\n            exponentiate      = TRUE,\n            panel.headings    = c(\"Analysis A\", \"Analysis B\"),\n            ci.delim          = \" - \",\n            xlim              = c(0.9, 1.1),\n            xticks            = c(0.9, 1, 1.1),\n            blankrows         = c(1, 1, 0, 1),\n            scalepoints       = TRUE,\n            pointsize         = 3,\n            col.heading.space = 1.5,\n            \n            col.right         = \"nb\",\n            col.right.heading = list(c(\"HR (95% CI)\", NA),\n                                     c(\"HR (95% CI)\", \"No. of\\nevents\")),\n            mid.space         = unit(5, \"mm\") - unit(12.1, \"mm\"))\n\nWarning: Removed 1 rows containing missing values (`geom_text_move()`)."
  },
  {
    "objectID": "posts/ckbplotr/forest-plot-spacing/index.html",
    "href": "posts/ckbplotr/forest-plot-spacing/index.html",
    "title": "Spacing with forest_plot()",
    "section": "",
    "text": "A PDF file explaining the forest_plot() spacing and positioning arguments can be found here."
  },
  {
    "objectID": "posts/ggplot/extract-a-ggplot-legend.html",
    "href": "posts/ggplot/extract-a-ggplot-legend.html",
    "title": "Extract a legend from a ggplot",
    "section": "",
    "text": "To extract a legend from a ggplot into a grid graphical object (grob) use:\n\nplot   <- ggplot(...) + theme(legend.position = \"none\")\ng      <- ggplotGrob(plot + theme(legend.position = \"bottom\"))$grobs\nlegend <- g[[which(sapply(g, function(x) x$name) == \"guide-box\")]]\n\nThe “legend” grob can then be arranged with other grobs/plots using gridExtra functions.\nThis code is derived from https://github.com/tidyverse/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "plotting",
    "section": "",
    "text": "Demonstrations of techniques for plotting with ckbplotr and ggplot2.\n\n\n\n\n\n\nckbplotr\n\n\n\n\n\n\nAdding arrows to confidence intervals when using shape_plot()\n\n\n\n\nAdding columns of text to forest plots (but not every panel)\n\n\n\n\nRemoving parts of a plot created with shape_plot() or forest_plot()\n\n\n\n\nSpacing with forest_plot()\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2\n\n\n\n\n\n\nExtract a legend from a ggplot\n\n\n\n\n\n\nNo matching items"
  }
]